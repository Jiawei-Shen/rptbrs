function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run$1(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run$1);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root.host) {
        return root;
    }
    return document;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run$1).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = new Set();
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (const subscriber of subscribers) {
                    subscriber[1]();
                    subscriber_queue.push(subscriber, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

/* src/Tour.svelte generated by Svelte v3.41.0 */

function add_css$1(target) {
	append_styles(target, "svelte-7pvpte", ".scrim.svelte-7pvpte{background-color:#333;height:100%;left:0;opacity:0.75;position:fixed;top:0;transition:clip-path 500ms ease-in-out;width:100%;z-index:1}.tooltip.svelte-7pvpte{background:#fff;border-radius:4px;left:0;overflow:hidden;position:absolute;top:0;transition:transform 500ms ease-in-out;width:300px;z-index:3}");
}

// (56:0) {#if active && items && items.length}
function create_if_block(ctx) {
	let div0;
	let div0_style_value;
	let t;
	let div1;
	let tourtip;
	let div1_style_value;
	let current;

	tourtip = new /*TourTip*/ ctx[0]({
			props: {
				atEnd: /*atEnd*/ ctx[4],
				message: /*items*/ ctx[1][/*currentStep*/ ctx[2]].getAttribute('data-tour'),
				onClickNext: /*onClickNext*/ ctx[5]
			}
		});

	return {
		c() {
			div0 = element("div");
			t = space();
			div1 = element("div");
			create_component(tourtip.$$.fragment);
			attr(div0, "class", "scrim svelte-7pvpte");
			attr(div0, "style", div0_style_value = getScrimStyle(/*items*/ ctx[1][/*currentStep*/ ctx[2]]));
			attr(div1, "class", "tooltip svelte-7pvpte");
			attr(div1, "style", div1_style_value = getTooltipStyle(/*items*/ ctx[1][/*currentStep*/ ctx[2]]));
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			mount_component(tourtip, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*items, currentStep*/ 6 && div0_style_value !== (div0_style_value = getScrimStyle(/*items*/ ctx[1][/*currentStep*/ ctx[2]]))) {
				attr(div0, "style", div0_style_value);
			}

			const tourtip_changes = {};
			if (dirty & /*atEnd*/ 16) tourtip_changes.atEnd = /*atEnd*/ ctx[4];
			if (dirty & /*items, currentStep*/ 6) tourtip_changes.message = /*items*/ ctx[1][/*currentStep*/ ctx[2]].getAttribute('data-tour');
			tourtip.$set(tourtip_changes);

			if (!current || dirty & /*items, currentStep*/ 6 && div1_style_value !== (div1_style_value = getTooltipStyle(/*items*/ ctx[1][/*currentStep*/ ctx[2]]))) {
				attr(div1, "style", div1_style_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(tourtip.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tourtip.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t);
			if (detaching) detach(div1);
			destroy_component(tourtip);
		}
	};
}

function create_fragment$2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*active*/ ctx[3] && /*items*/ ctx[1] && /*items*/ ctx[1].length && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*active*/ ctx[3] && /*items*/ ctx[1] && /*items*/ ctx[1].length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*active, items*/ 10) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function getScrimStyle(step) {
	const boundingRect = step.getBoundingClientRect();
	const left = boundingRect.left;
	const right = left + boundingRect.width;
	const top = boundingRect.top;
	const bottom = top + boundingRect.height;
	const { innerHeight, innerWidth } = window;

	return `
      clip-path: polygon(
        0px 0px,
        0px ${innerHeight}px,
        ${left}px ${innerHeight}px,
        ${left}px ${top}px,
        ${right}px ${top}px,
        ${right}px ${bottom}px,
        ${left}px ${bottom}px,
        ${left}px ${innerHeight}px,
        ${innerWidth}px ${innerHeight}px,
        ${innerWidth}px 0px
      );
    `;
}

function getTooltipStyle(step) {
	const TOOLTIP_WIDTH = 300;
	const boundingRect = step.getBoundingClientRect();
	const itemHorizontalCenter = boundingRect.left + boundingRect.width / 2;
	let tooltipLeft = itemHorizontalCenter - TOOLTIP_WIDTH / 2;
	if (tooltipLeft < 0) tooltipLeft = 0;
	if (tooltipLeft + TOOLTIP_WIDTH > window.innerWidth) tooltipLeft = window.innerWidth - TOOLTIP_WIDTH;
	return `transform: translate(${tooltipLeft}px, ${boundingRect.bottom}px);`;
}

function instance$2($$self, $$props, $$invalidate) {
	let atEnd;
	let { TourTip } = $$props;
	let active, items;
	let currentStep = 0;

	subscribe(store => {
		$$invalidate(3, { active, items } = store, active, $$invalidate(1, items));
	});

	function onClickNext() {
		if (atEnd) {
			stop();
			return;
		}

		$$invalidate(2, currentStep++, currentStep);
	}

	$$self.$$set = $$props => {
		if ('TourTip' in $$props) $$invalidate(0, TourTip = $$props.TourTip);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentStep, items*/ 6) {
			$$invalidate(4, atEnd = currentStep === items.length - 1);
		}
	};

	return [TourTip, items, currentStep, active, atEnd, onClickNext];
}

class Tour extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { TourTip: 0 }, add_css$1);
	}
}

/* src/TourItem.svelte generated by Svelte v3.41.0 */

function create_fragment$1(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "data-tour", /*message*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[4](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*message*/ 1) {
				attr(div, "data-tour", /*message*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[4](null);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { message } = $$props;
	let element;

	onMount(() => {
		register(element);
	});

	onDestroy(() => {
		unregister(element);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(1, element);
		});
	}

	$$self.$$set = $$props => {
		if ('message' in $$props) $$invalidate(0, message = $$props.message);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [message, element, $$scope, slots, div_binding];
}

class TourItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { message: 0 });
	}
}

/* src/TourTip.svelte generated by Svelte v3.41.0 */

function add_css(target) {
	append_styles(target, "svelte-1h7k10n", ".container.svelte-1h7k10n{padding:24px}.message.svelte-1h7k10n{margin:0 0 16px}");
}

function create_fragment(ctx) {
	let div;
	let p;
	let t0;
	let button;
	let t1_value = (/*atEnd*/ ctx[0] ? 'Done' : 'Next') + "";
	let t1;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			p = element("p");
			t0 = space();
			button = element("button");
			t1 = text(t1_value);
			attr(p, "class", "message svelte-1h7k10n");
			attr(button, "data-testid", "next-button");
			attr(div, "class", "container svelte-1h7k10n");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			p.innerHTML = /*message*/ ctx[1];
			append(div, t0);
			append(div, button);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*onClickNext*/ ctx[2])) /*onClickNext*/ ctx[2].apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			if (dirty & /*message*/ 2) p.innerHTML = /*message*/ ctx[1];			if (dirty & /*atEnd*/ 1 && t1_value !== (t1_value = (/*atEnd*/ ctx[0] ? 'Done' : 'Next') + "")) set_data(t1, t1_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { atEnd } = $$props;
	let { message } = $$props;
	let { onClickNext } = $$props;

	$$self.$$set = $$props => {
		if ('atEnd' in $$props) $$invalidate(0, atEnd = $$props.atEnd);
		if ('message' in $$props) $$invalidate(1, message = $$props.message);
		if ('onClickNext' in $$props) $$invalidate(2, onClickNext = $$props.onClickNext);
	};

	return [atEnd, message, onClickNext];
}

class TourTip extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { atEnd: 0, message: 1, onClickNext: 2 }, add_css);
	}
}

const tourStore = writable({
  active: false,
  items: []
});

function register(el) {
  tourStore.update(store => ({
    ...store,
    items: [...store.items, el]
  }));
}
function run() {
  tourStore.update(store => ({
    ...store,
    active: true
  }));
}
function stop() {
  tourStore.update(store => ({
    ...store,
    active: false
  }));
}
function unregister(el) {
  tourStore.update(store => ({
    ...store,
    items: store.items.filter(item => item !== el)
  }));
}

const subscribe = tourStore.subscribe.bind(tourStore);

export { Tour, TourItem, TourTip, register, run, stop, subscribe, unregister };
