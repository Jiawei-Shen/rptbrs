"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var long_1 = __importDefault(require("long"));
var virtualOffset_1 = __importStar(require("./virtualOffset"));
var chunk_1 = __importDefault(require("./chunk"));
var bgzf_filehandle_1 = require("@gmod/bgzf-filehandle");
var util_1 = require("./util");
var indexFile_1 = __importDefault(require("./indexFile"));
var TBI_MAGIC = 21578324; // TBI\1
var TAD_LIDX_SHIFT = 14;
/**
 * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)
 */
function reg2bins(beg, end) {
    beg += 1; // < convert to 1-based closed
    end -= 1;
    return [
        [0, 0],
        [1 + (beg >> 26), 1 + (end >> 26)],
        [9 + (beg >> 23), 9 + (end >> 23)],
        [73 + (beg >> 20), 73 + (end >> 20)],
        [585 + (beg >> 17), 585 + (end >> 17)],
        [4681 + (beg >> 14), 4681 + (end >> 14)],
    ];
}
var TabixIndex = /** @class */ (function (_super) {
    __extends(TabixIndex, _super);
    function TabixIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabixIndex.prototype.lineCount = function (refName, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var indexData, refId, idx, stats;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.parse(opts)];
                    case 1:
                        indexData = _a.sent();
                        if (!indexData) {
                            return [2 /*return*/, -1];
                        }
                        refId = indexData.refNameToId[refName];
                        idx = indexData.indices[refId];
                        if (!idx) {
                            return [2 /*return*/, -1];
                        }
                        stats = indexData.indices[refId].stats;
                        if (stats) {
                            return [2 /*return*/, stats.lineCount];
                        }
                        return [2 /*return*/, -1];
                }
            });
        });
    };
    // memoize
    // fetch and parse the index
    TabixIndex.prototype._parse = function (opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var bytes, _a, refCount, formatFlags, coordinateType, formatOpts, format, columnNumbers, metaValue, depth, maxBinNumber, maxRefLength, metaChar, skipLines, nameSectionLength, _b, refNameToId, refIdToName, currOffset, firstDataLine, indices;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = bgzf_filehandle_1.unzip;
                        return [4 /*yield*/, this.filehandle.readFile(opts)];
                    case 1: return [4 /*yield*/, _a.apply(void 0, [(_c.sent())])];
                    case 2:
                        bytes = _c.sent();
                        (0, util_1.checkAbortSignal)(opts.signal);
                        // check TBI magic numbers
                        if (bytes.readUInt32LE(0) !== TBI_MAGIC /* "TBI\1" */) {
                            throw new Error('Not a TBI file');
                            // TODO: do we need to support big-endian TBI files?
                        }
                        refCount = bytes.readInt32LE(4);
                        formatFlags = bytes.readInt32LE(8);
                        coordinateType = formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed';
                        formatOpts = {
                            0: 'generic',
                            1: 'SAM',
                            2: 'VCF',
                        };
                        format = formatOpts[formatFlags & 0xf];
                        if (!format) {
                            throw new Error("invalid Tabix preset format flags ".concat(formatFlags));
                        }
                        columnNumbers = {
                            ref: bytes.readInt32LE(12),
                            start: bytes.readInt32LE(16),
                            end: bytes.readInt32LE(20),
                        };
                        metaValue = bytes.readInt32LE(24);
                        depth = 5;
                        maxBinNumber = ((1 << ((depth + 1) * 3)) - 1) / 7;
                        maxRefLength = Math.pow(2, (14 + depth * 3));
                        metaChar = metaValue ? String.fromCharCode(metaValue) : null;
                        skipLines = bytes.readInt32LE(28);
                        nameSectionLength = bytes.readInt32LE(32);
                        _b = this._parseNameBytes(bytes.slice(36, 36 + nameSectionLength)), refNameToId = _b.refNameToId, refIdToName = _b.refIdToName;
                        currOffset = 36 + nameSectionLength;
                        indices = new Array(refCount).fill(0).map(function () {
                            // the binning index
                            var binCount = bytes.readInt32LE(currOffset);
                            currOffset += 4;
                            var binIndex = {};
                            var stats;
                            for (var j = 0; j < binCount; j += 1) {
                                var bin = bytes.readUInt32LE(currOffset);
                                currOffset += 4;
                                if (bin > maxBinNumber + 1) {
                                    throw new Error('tabix index contains too many bins, please use a CSI index');
                                }
                                else if (bin === maxBinNumber + 1) {
                                    var chunkCount = bytes.readInt32LE(currOffset);
                                    currOffset += 4;
                                    if (chunkCount === 2) {
                                        stats = _this.parsePseudoBin(bytes, currOffset);
                                    }
                                    currOffset += 16 * chunkCount;
                                }
                                else {
                                    var chunkCount = bytes.readInt32LE(currOffset);
                                    currOffset += 4;
                                    var chunks = new Array(chunkCount);
                                    for (var k = 0; k < chunkCount; k += 1) {
                                        var u = (0, virtualOffset_1.fromBytes)(bytes, currOffset);
                                        var v = (0, virtualOffset_1.fromBytes)(bytes, currOffset + 8);
                                        currOffset += 16;
                                        firstDataLine = _this._findFirstData(firstDataLine, u);
                                        chunks[k] = new chunk_1.default(u, v, bin);
                                    }
                                    binIndex[bin] = chunks;
                                }
                            }
                            // the linear index
                            var linearCount = bytes.readInt32LE(currOffset);
                            currOffset += 4;
                            var linearIndex = new Array(linearCount);
                            for (var k = 0; k < linearCount; k += 1) {
                                linearIndex[k] = (0, virtualOffset_1.fromBytes)(bytes, currOffset);
                                currOffset += 8;
                                firstDataLine = _this._findFirstData(firstDataLine, linearIndex[k]);
                            }
                            return { binIndex: binIndex, linearIndex: linearIndex, stats: stats };
                        });
                        return [2 /*return*/, {
                                indices: indices,
                                metaChar: metaChar,
                                maxBinNumber: maxBinNumber,
                                maxRefLength: maxRefLength,
                                skipLines: skipLines,
                                firstDataLine: firstDataLine,
                                columnNumbers: columnNumbers,
                                coordinateType: coordinateType,
                                format: format,
                                refIdToName: refIdToName,
                                refNameToId: refNameToId,
                                maxBlockSize: 1 << 16,
                            }];
                }
            });
        });
    };
    TabixIndex.prototype.parsePseudoBin = function (bytes, offset) {
        var lineCount = (0, util_1.longToNumber)(long_1.default.fromBytesLE(bytes.slice(offset + 16, offset + 24), true));
        return { lineCount: lineCount };
    };
    TabixIndex.prototype._parseNameBytes = function (namesBytes) {
        var currRefId = 0;
        var currNameStart = 0;
        var refIdToName = [];
        var refNameToId = {};
        for (var i = 0; i < namesBytes.length; i += 1) {
            if (!namesBytes[i]) {
                if (currNameStart < i) {
                    var refName = namesBytes.toString('utf8', currNameStart, i);
                    refName = this.renameRefSeq(refName);
                    refIdToName[currRefId] = refName;
                    refNameToId[refName] = currRefId;
                }
                currNameStart = i + 1;
                currRefId += 1;
            }
        }
        return { refNameToId: refNameToId, refIdToName: refIdToName };
    };
    TabixIndex.prototype.blocksForRange = function (refName, min, max, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var indexData, refId, ba, minOffset, overlappingBins, chunks, _i, overlappingBins_1, _a, start, end, bin, binChunks, c, nintv, lowest, minLin, maxLin, i, vp;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (min < 0) {
                            min = 0;
                        }
                        return [4 /*yield*/, this.parse(opts)];
                    case 1:
                        indexData = _b.sent();
                        if (!indexData) {
                            return [2 /*return*/, []];
                        }
                        refId = indexData.refNameToId[refName];
                        ba = indexData.indices[refId];
                        if (!ba) {
                            return [2 /*return*/, []];
                        }
                        minOffset = ba.linearIndex.length
                            ? ba.linearIndex[min >> TAD_LIDX_SHIFT >= ba.linearIndex.length
                                ? ba.linearIndex.length - 1
                                : min >> TAD_LIDX_SHIFT]
                            : new virtualOffset_1.default(0, 0);
                        if (!minOffset) {
                            console.warn('querying outside of possible tabix range');
                        }
                        overlappingBins = reg2bins(min, max) // List of bin #s that overlap min, max
                        ;
                        chunks = [];
                        // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned
                        for (_i = 0, overlappingBins_1 = overlappingBins; _i < overlappingBins_1.length; _i++) {
                            _a = overlappingBins_1[_i], start = _a[0], end = _a[1];
                            for (bin = start; bin <= end; bin++) {
                                if (ba.binIndex[bin]) {
                                    binChunks = ba.binIndex[bin];
                                    for (c = 0; c < binChunks.length; ++c) {
                                        chunks.push(new chunk_1.default(binChunks[c].minv, binChunks[c].maxv, bin));
                                    }
                                }
                            }
                        }
                        nintv = ba.linearIndex.length;
                        lowest = null;
                        minLin = Math.min(min >> 14, nintv - 1);
                        maxLin = Math.min(max >> 14, nintv - 1);
                        for (i = minLin; i <= maxLin; ++i) {
                            vp = ba.linearIndex[i];
                            if (vp) {
                                if (!lowest || vp.compareTo(lowest) < 0) {
                                    lowest = vp;
                                }
                            }
                        }
                        return [2 /*return*/, (0, util_1.optimizeChunks)(chunks, lowest)];
                }
            });
        });
    };
    return TabixIndex;
}(indexFile_1.default));
exports.default = TabixIndex;
//# sourceMappingURL=tbi.js.map