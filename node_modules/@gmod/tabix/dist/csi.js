"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var long_1 = __importDefault(require("long"));
var bgzf_filehandle_1 = require("@gmod/bgzf-filehandle");
var virtualOffset_1 = __importStar(require("./virtualOffset"));
var chunk_1 = __importDefault(require("./chunk"));
var util_1 = require("./util");
var indexFile_1 = __importDefault(require("./indexFile"));
var CSI1_MAGIC = 21582659; // CSI\1
var CSI2_MAGIC = 38359875; // CSI\2
function lshift(num, bits) {
    return num * Math.pow(2, bits);
}
function rshift(num, bits) {
    return Math.floor(num / Math.pow(2, bits));
}
var CSI = /** @class */ (function (_super) {
    __extends(CSI, _super);
    function CSI(args) {
        var _this = _super.call(this, args) || this;
        _this.maxBinNumber = 0;
        _this.depth = 0;
        _this.minShift = 0;
        return _this;
    }
    CSI.prototype.lineCount = function (refName, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var indexData, refId, idx, stats;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.parse(opts)];
                    case 1:
                        indexData = _a.sent();
                        if (!indexData) {
                            return [2 /*return*/, -1];
                        }
                        refId = indexData.refNameToId[refName];
                        idx = indexData.indices[refId];
                        if (!idx) {
                            return [2 /*return*/, -1];
                        }
                        stats = indexData.indices[refId].stats;
                        if (stats) {
                            return [2 /*return*/, stats.lineCount];
                        }
                        return [2 /*return*/, -1];
                }
            });
        });
    };
    CSI.prototype.indexCov = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('CSI indexes do not support indexcov');
            });
        });
    };
    CSI.prototype.parseAuxData = function (bytes, offset, auxLength) {
        if (auxLength < 30) {
            return {
                refIdToName: [],
                refNameToId: {},
            };
        }
        var formatFlags = bytes.readInt32LE(offset);
        var coordinateType = formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed';
        var format = { 0: 'generic', 1: 'SAM', 2: 'VCF' }[formatFlags & 0xf];
        if (!format) {
            throw new Error("invalid Tabix preset format flags ".concat(formatFlags));
        }
        var columnNumbers = {
            ref: bytes.readInt32LE(offset + 4),
            start: bytes.readInt32LE(offset + 8),
            end: bytes.readInt32LE(offset + 12),
        };
        var metaValue = bytes.readInt32LE(offset + 16);
        var metaChar = metaValue ? String.fromCharCode(metaValue) : '';
        var skipLines = bytes.readInt32LE(offset + 20);
        var nameSectionLength = bytes.readInt32LE(offset + 24);
        var _a = this._parseNameBytes(bytes.slice(offset + 28, offset + 28 + nameSectionLength)), refIdToName = _a.refIdToName, refNameToId = _a.refNameToId;
        return {
            refIdToName: refIdToName,
            refNameToId: refNameToId,
            skipLines: skipLines,
            metaChar: metaChar,
            columnNumbers: columnNumbers,
            format: format,
            coordinateType: coordinateType,
        };
    };
    CSI.prototype._parseNameBytes = function (namesBytes) {
        var currRefId = 0;
        var currNameStart = 0;
        var refIdToName = [];
        var refNameToId = {};
        for (var i = 0; i < namesBytes.length; i += 1) {
            if (!namesBytes[i]) {
                if (currNameStart < i) {
                    var refName = namesBytes.toString('utf8', currNameStart, i);
                    refName = this.renameRefSeq(refName);
                    refIdToName[currRefId] = refName;
                    refNameToId[refName] = currRefId;
                }
                currNameStart = i + 1;
                currRefId += 1;
            }
        }
        return { refNameToId: refNameToId, refIdToName: refIdToName };
    };
    // fetch and parse the index
    CSI.prototype._parse = function (opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var bytes, _a, csiVersion, maxRefLength, auxLength, aux, refCount, firstDataLine, currOffset, indices;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = bgzf_filehandle_1.unzip;
                        return [4 /*yield*/, this.filehandle.readFile(opts)];
                    case 1: return [4 /*yield*/, _a.apply(void 0, [(_b.sent())])
                        // check TBI magic numbers
                    ];
                    case 2:
                        bytes = _b.sent();
                        if (bytes.readUInt32LE(0) === CSI1_MAGIC) {
                            csiVersion = 1;
                        }
                        else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {
                            csiVersion = 2;
                        }
                        else {
                            throw new Error('Not a CSI file');
                            // TODO: do we need to support big-endian CSI files?
                        }
                        this.minShift = bytes.readInt32LE(4);
                        this.depth = bytes.readInt32LE(8);
                        this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7;
                        maxRefLength = Math.pow(2, (this.minShift + this.depth * 3));
                        auxLength = bytes.readInt32LE(12);
                        aux = {
                            refIdToName: [],
                            refNameToId: {},
                        };
                        if (auxLength) {
                            aux = this.parseAuxData(bytes, 16, auxLength);
                        }
                        refCount = bytes.readInt32LE(16 + auxLength);
                        currOffset = 16 + auxLength + 4;
                        indices = new Array(refCount).fill(0).map(function () {
                            // the binning index
                            var binCount = bytes.readInt32LE(currOffset);
                            currOffset += 4;
                            var binIndex = {};
                            var stats; // < provided by parsing a pseudo-bin, if present
                            for (var j = 0; j < binCount; j += 1) {
                                var bin = bytes.readUInt32LE(currOffset);
                                if (bin > _this.maxBinNumber) {
                                    // this is a fake bin that actually has stats information
                                    // about the reference sequence in it
                                    stats = _this.parsePseudoBin(bytes, currOffset + 4);
                                    currOffset += 4 + 8 + 4 + 16 + 16;
                                }
                                else {
                                    var loffset = (0, virtualOffset_1.fromBytes)(bytes, currOffset + 4);
                                    firstDataLine = _this._findFirstData(firstDataLine, loffset);
                                    var chunkCount = bytes.readInt32LE(currOffset + 12);
                                    currOffset += 16;
                                    var chunks = new Array(chunkCount);
                                    for (var k = 0; k < chunkCount; k += 1) {
                                        var u = (0, virtualOffset_1.fromBytes)(bytes, currOffset);
                                        var v = (0, virtualOffset_1.fromBytes)(bytes, currOffset + 8);
                                        currOffset += 16;
                                        // this._findFirstData(data, u)
                                        chunks[k] = new chunk_1.default(u, v, bin);
                                    }
                                    binIndex[bin] = chunks;
                                }
                            }
                            return { binIndex: binIndex, stats: stats };
                        });
                        return [2 /*return*/, __assign(__assign({}, aux), { csi: true, refCount: refCount, maxBlockSize: 1 << 16, firstDataLine: firstDataLine, csiVersion: csiVersion, indices: indices, depth: this.depth, maxBinNumber: this.maxBinNumber, maxRefLength: maxRefLength })];
                }
            });
        });
    };
    CSI.prototype.parsePseudoBin = function (bytes, offset) {
        var lineCount = (0, util_1.longToNumber)(long_1.default.fromBytesLE(Array.prototype.slice.call(bytes, offset + 28, offset + 36), true));
        return { lineCount: lineCount };
    };
    CSI.prototype.blocksForRange = function (refName, min, max, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var indexData, refId, ba, overlappingBins, chunks, _i, overlappingBins_1, _a, start, end, bin, binChunks, c;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (min < 0) {
                            min = 0;
                        }
                        return [4 /*yield*/, this.parse(opts)];
                    case 1:
                        indexData = _b.sent();
                        if (!indexData) {
                            return [2 /*return*/, []];
                        }
                        refId = indexData.refNameToId[refName];
                        ba = indexData.indices[refId];
                        if (!ba) {
                            return [2 /*return*/, []];
                        }
                        overlappingBins = this.reg2bins(min, max) // List of bin #s that overlap min, max
                        ;
                        chunks = [];
                        // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned
                        for (_i = 0, overlappingBins_1 = overlappingBins; _i < overlappingBins_1.length; _i++) {
                            _a = overlappingBins_1[_i], start = _a[0], end = _a[1];
                            for (bin = start; bin <= end; bin++) {
                                if (ba.binIndex[bin]) {
                                    binChunks = ba.binIndex[bin];
                                    for (c = 0; c < binChunks.length; ++c) {
                                        chunks.push(new chunk_1.default(binChunks[c].minv, binChunks[c].maxv, bin));
                                    }
                                }
                            }
                        }
                        return [2 /*return*/, (0, util_1.optimizeChunks)(chunks, new virtualOffset_1.default(0, 0))];
                }
            });
        });
    };
    /**
     * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)
     */
    CSI.prototype.reg2bins = function (beg, end) {
        beg -= 1; // < convert to 1-based closed
        if (beg < 1) {
            beg = 1;
        }
        if (end > Math.pow(2, 50)) {
            end = Math.pow(2, 34);
        } // 17 GiB ought to be enough for anybody
        end -= 1;
        var l = 0;
        var t = 0;
        var s = this.minShift + this.depth * 3;
        var bins = [];
        for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {
            var b = t + rshift(beg, s);
            var e = t + rshift(end, s);
            if (e - b + bins.length > this.maxBinNumber) {
                throw new Error("query ".concat(beg, "-").concat(end, " is too large for current binning scheme (shift ").concat(this.minShift, ", depth ").concat(this.depth, "), try a smaller query or a coarser index binning scheme"));
            }
            bins.push([b, e]);
        }
        return bins;
    };
    return CSI;
}(indexFile_1.default));
exports.default = CSI;
//# sourceMappingURL=csi.js.map