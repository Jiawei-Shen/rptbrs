import { GenericFilehandle } from 'generic-filehandle';
import VirtualOffset from './virtualOffset';
import Chunk from './chunk';
export interface Options {
    [key: string]: unknown;
    signal?: AbortSignal;
}
export default abstract class IndexFile {
    filehandle: GenericFilehandle;
    renameRefSeq: (arg0: string) => string;
    private _parseCache;
    /**
     * @param {filehandle} filehandle
     * @param {function} [renameRefSeqs]
     */
    constructor({ filehandle, renameRefSeqs, }: {
        filehandle: GenericFilehandle;
        renameRefSeqs?: (a: string) => string;
    });
    abstract lineCount(refName: string, args: Options): Promise<number>;
    protected abstract _parse(opts: Options): Promise<{
        refNameToId: {
            [key: string]: number;
        };
        refIdToName: string[];
    }>;
    getMetadata(opts?: Options): Promise<any>;
    abstract blocksForRange(refName: string, start: number, end: number, opts: Options): Promise<Chunk[]>;
    _findFirstData(currentFdl: VirtualOffset | undefined, virtualOffset: VirtualOffset): VirtualOffset;
    parse(opts?: Options): Promise<any>;
    hasRefSeq(seqId: number, opts?: Options): Promise<boolean>;
}
