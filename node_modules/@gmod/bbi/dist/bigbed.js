"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigBed = exports.filterUndef = void 0;
var binary_parser_1 = require("@gmod/binary-parser");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var abortable_promise_cache_1 = __importDefault(require("abortable-promise-cache"));
var quick_lru_1 = __importDefault(require("quick-lru"));
var bbi_1 = require("./bbi");
function filterUndef(ts) {
    return ts.filter(function (t) { return !!t; });
}
exports.filterUndef = filterUndef;
var BigBed = /** @class */ (function (_super) {
    __extends(BigBed, _super);
    function BigBed(opts) {
        var _this = _super.call(this, opts) || this;
        _this.readIndicesCache = new abortable_promise_cache_1.default({
            cache: new quick_lru_1.default({ maxSize: 1 }),
            fill: function (args, signal) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._readIndices(__assign(__assign({}, args), { signal: signal }))];
                });
            }); },
        });
        return _this;
    }
    BigBed.prototype.readIndices = function (opts) {
        if (opts === void 0) { opts = {}; }
        var options = 'aborted' in opts ? { signal: opts } : opts;
        return this.readIndicesCache.get(JSON.stringify(options), options, options.signal);
    };
    /*
     * retrieve unzoomed view for any scale
     * @param scale - unused
     * @param abortSignal - an optional AbortSignal to kill operation
     * @return promise for a BlockView
     */
    BigBed.prototype.getView = function (scale, opts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUnzoomedView(opts)];
            });
        });
    };
    /*
     * parse the bigbed extraIndex fields
     * @param abortSignal to abort operation
     * @return a Promise for an array of Index data structure since there can be multiple extraIndexes in a bigbed, see bedToBigBed documentation
     */
    BigBed.prototype._readIndices = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, extHeaderOffset, isBigEndian, data, le, ret, count, offset, blocklen, len, buffer, extParser, indices, i;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getHeader(opts)];
                    case 1:
                        _a = _b.sent(), extHeaderOffset = _a.extHeaderOffset, isBigEndian = _a.isBigEndian;
                        return [4 /*yield*/, this.bbi.read(Buffer.alloc(64), 0, 64, extHeaderOffset)];
                    case 2:
                        data = (_b.sent()).buffer;
                        le = isBigEndian ? 'big' : 'little';
                        ret = new binary_parser_1.Parser()
                            .endianess(le)
                            .uint16('size')
                            .uint16('count')
                            .uint64('offset')
                            .parse(data).result;
                        count = ret.count, offset = ret.offset;
                        // no extra index is defined if count==0
                        if (count === 0) {
                            return [2 /*return*/, []];
                        }
                        blocklen = 20;
                        len = blocklen * count;
                        return [4 /*yield*/, this.bbi.read(Buffer.alloc(len), 0, len, offset)];
                    case 3:
                        buffer = (_b.sent()).buffer;
                        extParser = new binary_parser_1.Parser()
                            .endianess(le)
                            .int16('type')
                            .int16('fieldcount')
                            .uint64('offset')
                            .skip(4)
                            .int16('field');
                        indices = [];
                        for (i = 0; i < count; i += 1) {
                            indices.push(extParser.parse(buffer.slice(i * blocklen)).result);
                        }
                        return [2 /*return*/, indices];
                }
            });
        });
    };
    /*
     * perform a search in the bigbed extraIndex to find which blocks in the bigbed data to look for the
     * actual feature data
     *
     * @param name - the name to search for
     * @param opts - a SearchOptions argument with optional signal
     * @return a Promise for an array of bigbed block Loc entries
     */
    BigBed.prototype.searchExtraIndexBlocks = function (name, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var isBigEndian, indices, locs, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getHeader(opts)];
                    case 1:
                        isBigEndian = (_b.sent()).isBigEndian;
                        return [4 /*yield*/, this.readIndices(opts)];
                    case 2:
                        indices = _b.sent();
                        if (!indices.length) {
                            return [2 /*return*/, []];
                        }
                        locs = indices.map(function (index) { return __awaiter(_this, void 0, void 0, function () {
                            var offset, field, data, p, _a, blockSize, keySize, valSize, bpt, bptReadNode, rootNodeOffset;
                            var _this = this;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        offset = index.offset, field = index.field;
                                        return [4 /*yield*/, this.bbi.read(Buffer.alloc(32), 0, 32, offset, opts)];
                                    case 1:
                                        data = (_b.sent()).buffer;
                                        p = new binary_parser_1.Parser()
                                            .endianess(isBigEndian ? 'big' : 'little')
                                            .int32('magic')
                                            .int32('blockSize')
                                            .int32('keySize')
                                            .int32('valSize')
                                            .uint64('itemCount');
                                        _a = p.parse(data).result, blockSize = _a.blockSize, keySize = _a.keySize, valSize = _a.valSize;
                                        bpt = new binary_parser_1.Parser()
                                            .endianess(isBigEndian ? 'big' : 'little')
                                            .int8('nodeType')
                                            .skip(1)
                                            .int16('cnt')
                                            .choice({
                                            tag: 'nodeType',
                                            choices: {
                                                0: new binary_parser_1.Parser().array('leafkeys', {
                                                    length: 'cnt',
                                                    type: new binary_parser_1.Parser()
                                                        .string('key', { length: keySize, stripNull: true })
                                                        .uint64('offset'),
                                                }),
                                                1: new binary_parser_1.Parser().array('keys', {
                                                    length: 'cnt',
                                                    type: new binary_parser_1.Parser()
                                                        .string('key', { length: keySize, stripNull: true })
                                                        .uint64('offset')
                                                        .uint32('length')
                                                        .uint32('reserved'),
                                                }),
                                            },
                                        });
                                        bptReadNode = function (nodeOffset) { return __awaiter(_this, void 0, void 0, function () {
                                            var len, buffer, node, lastOffset, i, key, i;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        len = 4 + blockSize * (keySize + valSize);
                                                        return [4 /*yield*/, this.bbi.read(Buffer.alloc(len), 0, len, nodeOffset, opts)];
                                                    case 1:
                                                        buffer = (_a.sent()).buffer;
                                                        node = bpt.parse(buffer).result;
                                                        if (node.leafkeys) {
                                                            lastOffset = void 0;
                                                            for (i = 0; i < node.leafkeys.length; i += 1) {
                                                                key = node.leafkeys[i].key;
                                                                if (name.localeCompare(key) < 0 && lastOffset) {
                                                                    return [2 /*return*/, bptReadNode(lastOffset)];
                                                                }
                                                                lastOffset = node.leafkeys[i].offset;
                                                            }
                                                            return [2 /*return*/, bptReadNode(lastOffset)];
                                                        }
                                                        for (i = 0; i < node.keys.length; i += 1) {
                                                            if (node.keys[i].key === name) {
                                                                return [2 /*return*/, __assign(__assign({}, node.keys[i]), { field: field })];
                                                            }
                                                        }
                                                        return [2 /*return*/, undefined];
                                                }
                                            });
                                        }); };
                                        rootNodeOffset = 32;
                                        return [2 /*return*/, bptReadNode(offset + rootNodeOffset)];
                                }
                            });
                        }); });
                        _a = filterUndef;
                        return [4 /*yield*/, Promise.all(locs)];
                    case 3: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                }
            });
        });
    };
    /*
     * retrieve the features from the bigbed data that were found through the lookup of the extraIndex
     * note that there can be multiple extraIndex, see the BigBed specification and the -extraIndex argument to bedToBigBed
     *
     * @param name - the name to search for
     * @param opts - a SearchOptions argument with optional signal
     * @return a Promise for an array of Feature
     */
    BigBed.prototype.searchExtraIndex = function (name, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var blocks, view, res, ret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchExtraIndexBlocks(name, opts)];
                    case 1:
                        blocks = _a.sent();
                        if (!blocks.length) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.getUnzoomedView(opts)];
                    case 2:
                        view = _a.sent();
                        res = blocks.map(function (block) {
                            return new rxjs_1.Observable(function (observer) {
                                view.readFeatures(observer, [block], opts);
                            }).pipe((0, operators_1.reduce)(function (acc, curr) { return acc.concat(curr); }), (0, operators_1.map)(function (x) {
                                for (var i = 0; i < x.length; i += 1) {
                                    x[i].field = block.field;
                                }
                                return x;
                            }));
                        });
                        return [4 /*yield*/, rxjs_1.merge.apply(void 0, res).toPromise()];
                    case 3:
                        ret = _a.sent();
                        return [2 /*return*/, ret.filter(function (f) {
                                return f.rest.split('\t')[f.field - 3] === name;
                            })];
                }
            });
        });
    };
    return BigBed;
}(bbi_1.BBI));
exports.BigBed = BigBed;
//# sourceMappingURL=bigbed.js.map