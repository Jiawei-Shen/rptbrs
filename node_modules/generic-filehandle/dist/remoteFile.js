"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer");
var file_uri_to_path_1 = __importDefault(require("file-uri-to-path"));
var _1 = require(".");
var myGlobal = typeof window !== 'undefined'
    ? window
    : typeof self !== 'undefined'
        ? self
        : { fetch: undefined };
var RemoteFile = /** @class */ (function () {
    function RemoteFile(source, opts) {
        if (opts === void 0) { opts = {}; }
        this.baseOverrides = {};
        this.url = source;
        // if it is a file URL, monkey-patch ourselves to act like a LocalFile
        if (source.startsWith('file://')) {
            var path = (0, file_uri_to_path_1.default)(source);
            if (!path) {
                throw new TypeError('invalid file url');
            }
            var localFile = new _1.LocalFile(path);
            this.read = localFile.read.bind(localFile);
            this.readFile = localFile.readFile.bind(localFile);
            this.stat = localFile.stat.bind(localFile);
            // @ts-ignore
            this.fetchImplementation = function () {
                /* intentionally blank */
            };
            return;
        }
        var fetch = opts.fetch || (myGlobal.fetch && myGlobal.fetch.bind(myGlobal));
        if (!fetch) {
            throw new TypeError("no fetch function supplied, and none found in global environment");
        }
        if (opts.overrides) {
            this.baseOverrides = opts.overrides;
        }
        this.fetchImplementation = fetch;
    }
    RemoteFile.prototype.getBufferFromResponse = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof response.buffer === 'function')) return [3 /*break*/, 1];
                        return [2 /*return*/, response.buffer()];
                    case 1:
                        if (!(typeof response.arrayBuffer === 'function')) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.arrayBuffer()];
                    case 2:
                        resp = _a.sent();
                        return [2 /*return*/, buffer_1.Buffer.from(resp)];
                    case 3: throw new TypeError('invalid HTTP response object, has no buffer method, and no arrayBuffer method');
                }
            });
        });
    };
    RemoteFile.prototype.fetch = function (input, init) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 6]);
                        return [4 /*yield*/, this.fetchImplementation(input, init)];
                    case 1:
                        response = _a.sent();
                        return [3 /*break*/, 6];
                    case 2:
                        e_1 = _a.sent();
                        if (!"".concat(e_1).includes('Failed to fetch')) return [3 /*break*/, 4];
                        // refetch to to help work around a chrome bug (discussed in
                        // generic-filehandle issue #72) in which the chrome cache returns a
                        // CORS error for content in its cache.  see also
                        // https://github.com/GMOD/jbrowse-components/pull/1511
                        console.warn("generic-filehandle: refetching ".concat(input, " to attempt to work around chrome CORS header caching bug"));
                        return [4 /*yield*/, this.fetchImplementation(input, __assign(__assign({}, init), { cache: 'reload' }))];
                    case 3:
                        response = _a.sent();
                        return [3 /*break*/, 5];
                    case 4: throw e_1;
                    case 5: return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, response];
                }
            });
        });
    };
    RemoteFile.prototype.read = function (buffer, offset, length, position, opts) {
        if (offset === void 0) { offset = 0; }
        if (position === void 0) { position = 0; }
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, signal, _b, overrides, args, response, responseData, bytesCopied, res, sizeMatch;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = opts.headers, headers = _a === void 0 ? {} : _a, signal = opts.signal, _b = opts.overrides, overrides = _b === void 0 ? {} : _b;
                        if (length < Infinity) {
                            headers.range = "bytes=".concat(position, "-").concat(position + length);
                        }
                        else if (length === Infinity && position !== 0) {
                            headers.range = "bytes=".concat(position, "-");
                        }
                        args = __assign(__assign(__assign({}, this.baseOverrides), overrides), { headers: __assign(__assign(__assign({}, headers), overrides.headers), this.baseOverrides.headers), method: 'GET', redirect: 'follow', mode: 'cors', signal: signal });
                        return [4 /*yield*/, this.fetch(this.url, args)];
                    case 1:
                        response = _c.sent();
                        if (!response.ok) {
                            throw new Error("HTTP ".concat(response.status, " ").concat(response.statusText, " ").concat(this.url));
                        }
                        if (!((response.status === 200 && position === 0) ||
                            response.status === 206)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getBufferFromResponse(response)];
                    case 2:
                        responseData = _c.sent();
                        bytesCopied = responseData.copy(buffer, offset, 0, Math.min(length, responseData.length));
                        res = response.headers.get('content-range');
                        sizeMatch = /\/(\d+)$/.exec(res || '');
                        if (sizeMatch && sizeMatch[1]) {
                            this._stat = { size: parseInt(sizeMatch[1], 10) };
                        }
                        return [2 /*return*/, { bytesRead: bytesCopied, buffer: buffer }];
                    case 3:
                        if (response.status === 200) {
                            throw new Error('${this.url} fetch returned status 200, expected 206');
                        }
                        // TODO: try harder here to gather more information about what the problem is
                        throw new Error("HTTP ".concat(response.status, " fetching ").concat(this.url));
                }
            });
        });
    };
    RemoteFile.prototype.readFile = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var encoding, opts, _a, headers, signal, _b, overrides, args, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (typeof options === 'string') {
                            encoding = options;
                            opts = {};
                        }
                        else {
                            encoding = options.encoding;
                            opts = options;
                            delete opts.encoding;
                        }
                        _a = opts.headers, headers = _a === void 0 ? {} : _a, signal = opts.signal, _b = opts.overrides, overrides = _b === void 0 ? {} : _b;
                        args = __assign(__assign({ headers: headers, method: 'GET', redirect: 'follow', mode: 'cors', signal: signal }, this.baseOverrides), overrides);
                        return [4 /*yield*/, this.fetch(this.url, args)];
                    case 1:
                        response = _c.sent();
                        if (!response) {
                            throw new Error('generic-filehandle failed to fetch');
                        }
                        if (response.status !== 200) {
                            throw Object.assign(new Error("HTTP ".concat(response.status, " fetching ").concat(this.url)), {
                                status: response.status,
                            });
                        }
                        if (encoding === 'utf8') {
                            return [2 /*return*/, response.text()];
                        }
                        if (encoding) {
                            throw new Error("unsupported encoding: ".concat(encoding));
                        }
                        return [2 /*return*/, this.getBufferFromResponse(response)];
                }
            });
        });
    };
    RemoteFile.prototype.stat = function () {
        return __awaiter(this, void 0, void 0, function () {
            var buf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this._stat) return [3 /*break*/, 2];
                        buf = buffer_1.Buffer.allocUnsafe(10);
                        return [4 /*yield*/, this.read(buf, 0, 10, 0)];
                    case 1:
                        _a.sent();
                        if (!this._stat) {
                            throw new Error("unable to determine size of file at ".concat(this.url));
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, this._stat];
                }
            });
        });
    };
    RemoteFile.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    return RemoteFile;
}());
exports.default = RemoteFile;
