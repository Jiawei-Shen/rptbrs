"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer");
// Using this you can "await" the file like a normal promise
// https://blog.shovonhasan.com/using-promises-with-filereader/
function readBlobAsArrayBuffer(blob) {
    var fileReader = new FileReader();
    return new Promise(function (resolve, reject) {
        fileReader.onerror = function () {
            fileReader.abort();
            reject(new Error('problem reading blob'));
        };
        fileReader.onabort = function () {
            reject(new Error('blob reading was aborted'));
        };
        fileReader.onload = function () {
            if (fileReader.result && typeof fileReader.result !== 'string') {
                resolve(fileReader.result);
            }
            else {
                reject(new Error('unknown error reading blob'));
            }
        };
        fileReader.readAsArrayBuffer(blob);
    });
}
function readBlobAsText(blob) {
    var fileReader = new FileReader();
    return new Promise(function (resolve, reject) {
        fileReader.onerror = function () {
            fileReader.abort();
            reject(new Error('problem reading blob'));
        };
        fileReader.onabort = function () {
            reject(new Error('blob reading was aborted'));
        };
        fileReader.onload = function () {
            if (fileReader.result && typeof fileReader.result === 'string') {
                resolve(fileReader.result);
            }
            else {
                reject(new Error('unknown error reading blob'));
            }
        };
        fileReader.readAsText(blob);
    });
}
/**
 * Blob of binary data fetched from a local file (with FileReader).
 *
 * Adapted by Robert Buels and Garrett Stevens from the BlobFetchable object in
 * the Dalliance Genome Explorer, which is copyright Thomas Down 2006-2011.
 */
var BlobFile = /** @class */ (function () {
    function BlobFile(blob) {
        this.blob = blob;
        this.size = blob.size;
    }
    BlobFile.prototype.read = function (buffer, offset, length, position) {
        if (offset === void 0) { offset = 0; }
        if (position === void 0) { position = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var start, end, result, resultBuffer, bytesCopied;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // short-circuit a read of 0 bytes here, because browsers actually sometimes
                        // crash if you try to read 0 bytes from a local file!
                        if (!length) {
                            return [2 /*return*/, { bytesRead: 0, buffer: buffer }];
                        }
                        start = position;
                        end = start + length;
                        return [4 /*yield*/, readBlobAsArrayBuffer(this.blob.slice(start, end))];
                    case 1:
                        result = _a.sent();
                        resultBuffer = buffer_1.Buffer.from(result);
                        bytesCopied = resultBuffer.copy(buffer, offset);
                        return [2 /*return*/, { bytesRead: bytesCopied, buffer: resultBuffer }];
                }
            });
        });
    };
    BlobFile.prototype.readFile = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var encoding, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof options === 'string') {
                            encoding = options;
                        }
                        else {
                            encoding = options && options.encoding;
                        }
                        if (encoding === 'utf8') {
                            return [2 /*return*/, readBlobAsText(this.blob)];
                        }
                        if (encoding) {
                            throw new Error("unsupported encoding: ".concat(encoding));
                        }
                        return [4 /*yield*/, readBlobAsArrayBuffer(this.blob)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, buffer_1.Buffer.from(result)];
                }
            });
        });
    };
    BlobFile.prototype.stat = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, { size: this.size }];
            });
        });
    };
    BlobFile.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    return BlobFile;
}());
exports.default = BlobFile;
