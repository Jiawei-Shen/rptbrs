var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".file-uploader {\n  position: relative;\n  display: inline-block;\n}\n.file-uploader .error-msg {\n  color: #C00;\n}\n.file-uploader .message {\n  color: #5C5;\n}\n.file-uploader .upload-label input {\n  display: none;\n}")
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _plupload = require('plupload');

var _plupload2 = _interopRequireDefault(_plupload);

var _ui = require('smui/base/ui');

var _ui2 = _interopRequireDefault(_ui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.plupload = _plupload2.default;

var uploadConf = {
    runtimes: 'html5',
    multi_selection: false,
    filters: {
        max_file_size: '300kb',
        mime_types: [{
            title: 'Image files',
            extensions: 'jpg,gif,png'
        }]
    }
};

var params = {
    filters: {},
    files: [],
    uploadUrl: '',
    message: '',
    buttonId: '',
    isInputing: true,
    errorMsg: '' };

var lang = {
    en: {
        'FILE_NAME': 'File Name: ',
        'FILE_SIZE': 'File Size: ',
        'UPLOAD': 'upload',
        'UPLOADER_LABEL': 'Select File'
    },
    cn: {
        'FILE_NAME': '文件名：',
        'FILE_SIZE': '文件大小：',
        'UPLOAD': '上传',
        'UPLOADER_LABEL': '选择文件'
    }
};

exports.default = {
    params: params,
    mixins: [_ui2.default],
    lang: lang,
    data: function data() {
        var buttonId = 'file-upload-' + Math.floor(Math.random() * 100);
        return {
            buttonId: buttonId
        };
    },
    ready: function ready() {
        var $vm = this;
        (0, _assign2.default)(uploadConf.filters, $vm.filters);
        this.createUploader({
            url: this.uploadUrl,
            browse_button: this.buttonId,
            init: {
                PostInit: function PostInit() {
                    $vm.$emit('INITED', {});
                    $vm.initPost();
                },
                FilesAdded: function FilesAdded(up, files) {
                    if ($vm.getRequestHeaders) {
                        up.settings.headers = $vm.getRequestHeaders();
                    }
                    $vm.$emit('ADD_FILE', { files: files, up: up });
                    $vm.onAddFile({ files: files, up: up });
                },
                FileUploaded: function FileUploaded(up, files, data) {
                    $vm.$emit('RESPONSE', data);
                    $vm.onResponse(data);
                },
                Error: function Error(up, err) {
                    $vm.$emit('ERROR', err);
                    $vm.onError(err);
                }
            }
        });
    },

    methods: {
        upload: function upload() {
            this.uploader.start();
            return false;
        },
        createUploader: function createUploader(option) {
            var conf = (0, _assign2.default)(uploadConf, option);
            this.uploader = new _plupload2.default.Uploader(conf);
            this.uploader.init();
        },
        initPost: function initPost() {
            var url = this.getUploadUrl();
            this.uploader.setOption({ url: url });
        },
        getUploadUrl: function getUploadUrl() {},
        onResponse: function onResponse(data) {
            this.errorMsg = '';
            var result = _plupload2.default.handler.response.call(this, data);
            if (result) {
                this.emit('uploaded', result);
            }
        },
        onError: function onError(err) {
            this.errorMsg = err.message;
        },
        onAddFile: function onAddFile(event) {
            this.errorMsg = '';

            var up = event.up;
            var files = event.files;

            _plupload2.default.each(event.files, function (file) {
                file.formatedSize = _plupload2.default.formatSize(file.size);
            });

            this.files = files;

            for (var file in up.files) {
                up.removeFile(file);
            }
        }
    }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"file-uploader"},[_c('label',{staticClass:"upload-label button",attrs:{"for":_vm.buttonId}},[_vm._v("\n        "+_vm._s(_vm.$lt('UPLOADER_LABEL'))+"\n        "),_c('input',{staticClass:"picker",attrs:{"type":"file","id":_vm.buttonId}})]),_vm._v(" "),_c('button',{directives:[{name:"show",rawName:"v-show",value:(_vm.files.length > 0),expression:"files.length > 0"}],staticClass:"uploader button",attrs:{"type":"button"},on:{"click":function($event){$event.preventDefault();_vm.upload($event)}}},[_vm._v(_vm._s(_vm.$lt('UPLOAD')))]),_vm._v(" "),_vm._t("default"),_vm._v(" "),(_vm.files.length > 0)?_c('ul',{staticClass:"filelist"},_vm._l((_vm.files),function(file){return _c('li',{attrs:{"data-id":file.id}},[_c('span',{staticClass:"finfo"},[_vm._v(_vm._s(_vm.$lt('FILE_NAME'))+" "+_vm._s(file.name))]),_vm._v(" "),_c('span',{staticClass:"finfo"},[_vm._v(_vm._s(_vm.$lt('FILE_SIZE'))+" "+_vm._s(file.formatedSize))])])})):_vm._e(),_vm._v(" "),(_vm.errorMsg)?_c('div',{staticClass:"error-msg"},[_vm._v(_vm._s(_vm.errorMsg))]):_vm._e(),_vm._v(" "),(_vm.message)?_c('div',{staticClass:"message"},[_vm._v(_vm._s(_vm.message))]):_vm._e()],2)}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-97db3912", __vue__options__)
  } else {
    hotAPI.reload("data-v-97db3912", __vue__options__)
  }
})()}