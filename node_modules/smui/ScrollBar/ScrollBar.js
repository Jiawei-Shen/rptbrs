var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".trans-scroll-bar .scroll-container {\n  overflow: hidden;\n  position: relative;\n  padding: 1px;\n  box-sizing: border-box;\n  background: #f9f9f9;\n  height: 19px;\n  border: 1px solid #e4e4e4;\n  cursor: pointer;\n}\n.trans-scroll-bar .scroll-container .scroll-bar {\n  position: absolute;\n  height: 12px;\n  background-color: #ccc;\n  left: 0;\n  top: 3px;\n  border-radius: 50px;\n  -webkit-transition: background 0.4s ease;\n  transition: background 0.4s ease;\n}")
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ui = require('../base/ui');

var _ui2 = _interopRequireDefault(_ui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var params = {};
exports.default = {
    params: params,
    mixins: [_ui2.default],
    data: function data() {
        return {
            inited: false,
            pwidth: 1000,
            scrollBarLeft: 0,
            scrollBarWidth: 0.1,
            mainDom: null,
            mainDomClientWidth: 100,
            mainDomScrollWidth: 100,
            lastUpdateTime: 0,
            dragObj: function () {
                var params = {
                    left: 0,
                    currentX: 0,
                    minx: false,
                    maxx: false,
                    parentWidth: 100
                };

                var getCss = function getCss(o, key) {
                    return o.currentStyle ? o.currentStyle[key] : document.defaultView.getComputedStyle(o, false)[key];
                };
                return {
                    setRange: function setRange(x) {
                        if (x) {
                            params.minx = x.min;
                            params.maxx = x.max;
                        }
                    },
                    startDrag: function startDrag(bar, target, callback, direction) {
                        var isX = direction === 'x' || !direction;
                        if (getCss(target, 'left') !== 'auto') {
                            params.left = getCss(target, 'left');
                        }

                        function mouseDown(event) {
                            if (!event) {
                                event = window.event;

                                bar.onselectstart = function () {
                                    return false;
                                };
                            }
                            if (getCss(target, 'left') !== 'auto') {
                                params.left = getCss(target, 'left');
                            }
                            params.parentWidth = target.parentElement.clientWidth;
                            params.currentX = event.clientX;
                        }
                        function mouseMove(event) {
                            event.preventDefault();
                            if (event.which) {
                                var e = event || window.event;
                                var nowX = e.clientX;
                                var disX = nowX - params.currentX;
                                var curXPer = 0;

                                if (isX) {
                                    var curX = parseInt(params.left) + disX;
                                    curXPer = curX * 100 / params.parentWidth;
                                    if (typeof params.minx !== 'undefined') {
                                        curXPer = curXPer < params.minx ? params.minx : curXPer;
                                    }
                                    if (typeof params.maxx !== 'undefined') {
                                        curXPer = curXPer > params.maxx ? params.maxx : curXPer;
                                    }
                                    target.style.left = curXPer + '%';
                                }
                                if (typeof callback === 'function') {
                                    callback(curXPer);
                                }
                            }
                        }
                        function docuMouseEnd(event) {
                            document.removeEventListener('mousemove', mouseMove);
                            document.removeEventListener('mouseup', docuMouseEnd);
                        }
                        bar.onmousedown = function (event) {
                            mouseDown(event);
                            document.addEventListener('mousemove', mouseMove);
                            document.addEventListener('mouseup', docuMouseEnd);
                        };
                    }
                };
            }()
        };
    },

    methods: {
        getMainDomScrollWidth: function getMainDomScrollWidth() {
            var me = this;
            var nowTime = Date.now();
            if (nowTime - me.lastUpdateTime > 1000) {
                me.lastUpdateTime = nowTime;
                me.refresh();
            }
            return me.mainDomScrollWidth;
        },
        dragScrollbar: function dragScrollbar(x, y) {
            this.mainDom.scrollLeft = this.getMainDomScrollWidth() * x / 100;
        },

        moveSlowly: function moveSlowly(targetPercent) {
            var me = this;
            var curPer = me.mainDom.scrollLeft * 100 / me.getMainDomScrollWidth();
            var speed = (targetPercent - curPer) / 8;
            var curTimer = setInterval(function () {
                var nextPer = curPer + speed;
                if ((targetPercent - curPer) * (targetPercent - nextPer) <= 0) {
                    me.dragScrollbar(targetPercent);
                    clearInterval(curTimer);
                    return;
                }
                me.dragScrollbar(curPer);
                curPer = nextPer;
            }, 20);
        },
        moveHere: function moveHere(e) {
            var me = this;
            var scrollParentDom = me.$el.querySelector('.scroll-container');
            if (e.target == scrollParentDom) {
                var clickPer = e.offsetX / scrollParentDom.clientWidth;
                var scrollPer = clickPer * 100 - me.scrollBarWidth / 2;
                scrollPer = Math.min(100 - me.scrollBarWidth, scrollPer);
                scrollPer = Math.max(0, scrollPer);
                me.moveSlowly(scrollPer);
            }
        },
        refresh: function refresh() {
            var me = this;
            var clientWidth = me.mainDom.clientWidth;
            var scrollWidth = me.mainDom.scrollWidth;
            if (me.mainDomClientWidth != clientWidth || me.mainDomScrollWidth != scrollWidth) {
                me.mainDomClientWidth = clientWidth;
                me.mainDomScrollWidth = scrollWidth;
                me.scrollBarWidth = clientWidth * 100 / scrollWidth;
                me.dragObj.setRange({
                    min: 0, max: 100 - me.scrollBarWidth
                });
            }
        },
        init: function init(mainDom) {
            var _this = this;

            var me = this;
            me.mainDom = mainDom;
            function doScroll() {
                var scrollWidth = me.getMainDomScrollWidth();
                var sLeft = me.mainDom.scrollLeft * 100 / scrollWidth;
                me.scrollBarLeft = sLeft;
            }
            if (!me.inited) {
                var sbar = this.$el.querySelector('.scroll-bar');
                me.dragObj.startDrag(sbar, sbar, this.dragScrollbar, 'x');
                me.mainDom.addEventListener('scroll', doScroll);
                me.inited = true;
            }
            this.$nextTick(function () {
                _this.refresh();
            });
        }
    }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"trans-scroll-bar"},[_c('div',{staticClass:"scroll-container",on:{"click":_vm.moveHere}},[_c('div',{staticClass:"scroll-bar",style:({left: _vm.scrollBarLeft+'%', width: _vm.scrollBarWidth + '%'})})])])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-f158aef6", __vue__options__)
  } else {
    hotAPI.reload("data-v-f158aef6", __vue__options__)
  }
})()}