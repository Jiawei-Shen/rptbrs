var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".simple-table {\n  border: 1px solid #e4e4e4;\n  border-top: none;\n  border-right: none;\n  position: relative;\n  background-color: #FFF;\n  max-width: 100%;\n  box-sizing: border-box;\n}\n.simple-table .plate {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  right: 0;\n  top: 20px;\n  z-index: 999;\n  background: #EEE;\n}\n.simple-table .table-body {\n  min-width: 100%;\n  position: relative;\n}\n.simple-table .table-body.scroll-y {\n  max-height: 80vh;\n  overflow-y: scroll;\n}\n.simple-table .table-body.scroll-y .invis {\n  visibility: hidden;\n}\n.simple-table .scroll-y {\n  min-width: 100%;\n}\n.simple-table .outer-box.scroll-x {\n  overflow-x: scroll;\n  overflow-y: auto;\n  position: relative;\n}\n.simple-table .outer-box.scroll-x .table-body.scroll-y {\n  overflow-x: hidden;\n}\n.simple-table .outer-box.empty .table-body {\n  position: relative;\n  height: 100%;\n  max-height: 100%;\n}\n.simple-table .outer-box.empty .table-body.scroll-y {\n  overflow-y: hidden !important;\n  max-height: 100% !important;\n}\n.simple-table .outer-box.empty .pad-row {\n  visibility: hidden;\n}\n.simple-table .plugin-items {\n  display: inline-block;\n  position: absolute;\n  right: 5px;\n  top: 10px;\n}\n.simple-table .scrolling .pin-x {\n  display: none;\n}\n.simple-table thead.head-row {\n  width: 100%;\n  position: static;\n  background: #EEE;\n  border-bottom: 1px solid #EEE;\n}\n.simple-table table {\n  border-spacing: 0;\n  width: 100%;\n}\n.simple-table table tr {\n  position: relative;\n}\n.simple-table thead {\n  background-color: #f5f5f5;\n}\n.simple-table thead tr td {\n  line-height: 2em;\n  vertical-align: baseline;\n  background: #EEE;\n}\n.simple-table td {\n  color: #333;\n  font-size: 12px;\n  line-height: 1.5em;\n  border-top: 1px solid #e4e4e4;\n  border-right: 1px solid #e4e4e4;\n  padding: 8px 5px;\n  position: relative;\n  vertical-align: middle;\n}\n.simple-table table thead tr td {\n  background: #fff;\n  background-color: #fbfbfb;\n  font-weight: 700;\n  color: #656565;\n}\n.simple-table table tr:hover {\n  background-color: #f4fbf9;\n}\n.simple-table .pad-row {\n  height: 30px;\n}\n.simple-table .empty-box {\n  text-align: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  min-width: 100%;\n  background-image: url('//image.uc.cn/s/uae/g/2p/cpc/image/null.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  background-color: #FFF;\n  min-height: 400px;\n  margin: 0;\n}\n.simple-table .empty-box .empty-text {\n  padding-top: 100px;\n  text-align: center;\n  line-height: 50px;\n  font-size: 30px;\n  letter-spacing: 5px;\n  color: #d8d8d8;\n}\n.simple-table .summary-row {\n  background: #EEE;\n}\n.simple-table .summary-row .title {\n  font-weight: bold;\n}\n.simple-table .outer-box.pined .pin-x {\n  position: absolute;\n  top: 0;\n  left: 0;\n  min-width: 40px;\n  height: 100%;\n  padding: 10px 5px;\n  z-index: 7;\n  border-right: 1px solid #EEE;\n  background: #FCFCFC;\n  opacity: 0.98;\n}\n.simple-table .outer-box.pined table tr:hover .pin-x {\n  background-color: #f4fbf9!important;\n}")
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _ui = require('../base/ui');

var _ui2 = _interopRequireDefault(_ui);

var _util = require('../base/util');

var _util2 = _interopRequireDefault(_util);

var _TableHead = require('./TableHead');

var _TableHead2 = _interopRequireDefault(_TableHead);

var _FieldEditor = require('../FieldEditor');

var _FieldEditor2 = _interopRequireDefault(_FieldEditor);

var _ScrollBar = require('../ScrollBar');

var _ScrollBar2 = _interopRequireDefault(_ScrollBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var params = {
    cellTextMap: {},
    headTextMap: {},
    cellComp: {},
    selected: [],
    fields: [],
    sortState: {},
    sortFields: [],
    items: [],
    info: {},
    singleFieldSort: true,
    scrollX: false,
    scrollY: false,
    pinCell: false,
    scrollDelay: 200,
    minRows: 0,
    emptyTip: false,
    summary: {},
    action: {},
    showScrollBar: 0,
    syncParams: false,
    defaultOrder: '-down',
    summaryData: {},
    fieldWidth: {},
    selectable: true,
    checkAllPages: false,
    needCheckAllPages: false,
    headRow: ['origin'] };

exports.default = {
    params: params,
    mixins: [_ui2.default],
    deepProps: ['sortState'],
    private: {
        scrollTop: 0,
        clientHeight: 0,
        clientWidth: 0,
        scrollLeft: 0,
        scrollWidth: 500,
        scrolling: false,
        isFocus: false
    },
    ready: function ready() {
        if (!this.params) {
            this.params = {
                fields: this.fields,
                headTextMap: this.headTextMap
            };
        }

        if (this.params.showScrollBar === undefined) {
            this.showScrollBar = this.scrollX;
        }

        if (this.scrollDelay > 20) {
            var scrollHorizon = this.scrollHorizon,
                scrollVertical = this.scrollVertical,
                beforeScroll = this.beforeScroll,
                fixHeadWidth = this.fixHeadWidth,
                scrollDelay = this.scrollDelay;

            this.scrollHorizon = _util2.default.throttle(scrollHorizon, beforeScroll, scrollDelay);
            this.scrollVertical = _util2.default.throttle(scrollVertical, scrollDelay);
            this.fixHeadWidth = _util2.default.throttle(fixHeadWidth, scrollDelay);
        }
    },
    mounted: function mounted() {
        var _this = this;

        this.fixHeadWidth(true);
        setTimeout(function () {
            _this.clearSortState();
            _this.initScroller();
        }, 300);
    },

    watch: {
        selected: function selected(value) {
            var items = this.items;
            var list = [];
            if (value && value.length) {
                value = value.filter(function (idx) {
                    if (items[idx].$disabled !== true) {
                        list.push(items[idx]);
                        return true;
                    }
                    return false;
                });
            }
            this.emit('selected-changed', value);
            this.emit('selected-list-changed', list);
            var selectors = false;
            if (this.$el) {
                selectors = this.$el.querySelectorAll('.row-select');
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(selectors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var selector = _step.value;

                    if (selector && selector.__vue__) {
                        selector = selector.__vue__;
                        selector.setOptions({
                            selected: this.selected,
                            items: this.items
                        });
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        },
        items: function items(value) {
            this.fixHeadWidth();
        },
        clientWidth: function clientWidth(value) {
            this.fixHeadWidth();
        }
    },
    computed: {
        padRows: function padRows() {
            var pad = this.minRows - this.items.length;
            return Math.max(pad, 0);
        },
        isEmpty: function isEmpty() {
            var flag = !this.items || this.items.length === 0;

            if (this.__ready && flag) {
                this.initScroller();
            }
            return flag;
        },
        sumData: function sumData() {
            var data = {
                cnt: 0,
                data: {}
            };
            var flag = true;
            var summaryData = this.summaryData;

            if (!summaryData || !this.fields || !this.summary) {
                return data;
            }
            if (!(this.summary.fields || []).length) {
                return data;
            }

            var fieldMap = {};
            this.summary.fields.forEach(function (x) {
                fieldMap[x] = 1;
            });

            this.fields.forEach(function (field, idx) {
                if (fieldMap.hasOwnProperty(field)) {
                    data.data[field] = summaryData[field];
                    flag = false;
                } else if (flag) {
                    data.cnt++;
                } else {
                    data.data[field] = '-';
                }
            });
            return data;
        },
        headParams: function headParams() {
            var checkAll = this.checkAll,
                needCheckAllPages = this.needCheckAllPages,
                checkAllPages = this.checkAllPages,
                selected = this.selected,
                items = this.items,
                fields = this.fields,
                selectable = this.selectable,
                sortState = this.sortState;

            return (0, _assign2.default)({}, this.params, { checkAll: checkAll, needCheckAllPages: needCheckAllPages, checkAllPages: checkAllPages, selected: selected, items: items, fields: fields, selectable: selectable, sortState: sortState });
        }
    },
    components: {
        TableHead: _TableHead2.default,
        ScrollBar: _ScrollBar2.default,
        FieldEditor: _FieldEditor2.default
    },
    methods: {
        clearStatus: function clearStatus() {
            this.clearSortState();
            (0, _assign2.default)(this, { summaryData: [], selected: [] });
        },
        clearSortState: function clearSortState() {
            var sortState = this.sortState;
            for (var key in sortState) {
                if (sortState.hasOwnProperty(key)) {
                    sortState[key] = '';
                }
            }
        },
        click: function click(event) {
            var option = event.target.dataset;
            var target = event.target.closest('td');
            this.emit('td-click', target);
            if (this.action && option.action) {
                var func = this.action[option.action] || this[option.action];
                if (typeof func === 'function') {
                    var row = target.dataset.row;
                    event.data = this.items[+row] || {};
                    event.field = target.dataset.col;
                    event.option = option;
                    func.call(this, event);
                }
            }
        },
        sortField: function sortField(e) {
            var field = e.field;
            var state = this.sortState;
            var st = state[field];
            if (st === '') {
                st = this.defaultOrder || '-up';
            }
            var asc = st === '-up';

            if (this.singleFieldSort) {
                for (var key in state) {
                    if (key !== field) {
                        state[key] = '';
                    }
                }
            }

            state[field] = asc ? '-down' : '-up';

            this.emit('sort-field', {
                field: field,
                asc: asc
            });
        },
        beforeScroll: function beforeScroll() {
            if (this.pinCell) {
                this.$refs.outerBox.classList.add('scrolling');
            }
        },
        scrollHorizon: function scrollHorizon(e) {
            if (!this.scrollX) {
                return;
            }
            var _e$target = e.target,
                scrollLeft = _e$target.scrollLeft,
                clientWidth = _e$target.clientWidth,
                scrollWidth = _e$target.scrollWidth;

            var ratio = clientWidth / scrollWidth;
            this.emit('scroll-x', { scrollLeft: scrollLeft, clientWidth: clientWidth, scrollWidth: scrollWidth, ratio: ratio });
            (0, _assign2.default)(this, { scrollLeft: scrollLeft, clientWidth: clientWidth, scrollWidth: scrollWidth, ratio: ratio });
            this.ratioX = ratio;

            if (this.pinCell) {
                this.fixPinCells(e.target);
                this.$refs.outerBox.classList.remove('scrolling');
            }
        },
        find: function find(selector) {
            if (this.__ready) {
                return [].slice.call(this.$el.querySelectorAll(selector));
            }
        },
        fixPinCells: function fixPinCells(target) {
            var scrollLeft = this.scrollLeft;
            if (scrollLeft > 5) {
                target.classList.add('pined');
                this.find('.pin-x').forEach(function (x) {
                    x.style.left = x.parentElement.offsetLeft + scrollLeft + 'px';
                });
            } else {
                target.classList.remove('pined');
            }
        },
        scrollVertical: function scrollVertical(e) {
            if (!this.scrollY) {
                return;
            }
            this.isFocus = true;
            var _e$target2 = e.target,
                scrollTop = _e$target2.scrollTop,
                clientHeight = _e$target2.clientHeight,
                scrollHeight = _e$target2.scrollHeight;

            var ratio = clientHeight / scrollHeight;
            this.emit('scroll-y', { scrollTop: scrollTop, clientHeight: clientHeight, scrollHeight: scrollHeight, ratio: ratio });
            (0, _assign2.default)(this, { scrollTop: scrollTop, clientHeight: clientHeight, scrollHeight: scrollHeight });
            if (this.ratioX < 0.95) {
                this.fixHeadWidth();
            }
        },
        changeCheck: function changeCheck(e) {
            if (e.checkAll) {
                this.selected = this.items.map(function (item, idx) {
                    return idx;
                });
                this.checkAllPages = e.checkAllPages;
            } else {
                this.checkAll = false;
                this.checkAllPages = false;
                this.selected = [];
            }
        },
        fixHeadWidth: function fixHeadWidth(clear) {
            if (!this.$el.querySelector) {
                return;
            }
            var headRow = this.$el.querySelector('.affix-head');
            var header = this.$el.querySelector('.table-content .head-row');
            var outerBox = this.$el.querySelector('.outer-box');
            if (outerBox && headRow && header) {
                if (!this.affix) {
                    this.affix = this.$el.querySelector('.affix-head');
                    this.body = this.$el.querySelector('.table-body');
                }

                var scrollWidth = clear ? 0 : header.clientWidth;

                if (Math.abs(this.scrollWidth - scrollWidth) > 80) {
                    this.scrollWidth = scrollWidth;
                    this.body.style.width = scrollWidth + 'px';
                }

                headRow.style.width = scrollWidth + 'px';
                var headCells = headRow.querySelectorAll('td >.cell');
                var collums = headRow.querySelectorAll('colgroup col');
                var tdList = header.querySelectorAll('td');
                for (var i = 0; i < tdList.length; i++) {
                    if (i >= headCells.length) {
                        continue;
                    }
                    var width = tdList[i].clientWidth;
                    if (clear) {
                        headCells[i].style = '';
                        collums[i].style = '';
                    } else {
                        headCells[i].style.width = width - 10 + 'px';
                        collums[i].style.width = width + 'px';
                    }
                }
            }
        },
        setFields: function setFields(fields) {
            if (this.params.fields) {
                this.params.fields = fields;
            }
            this.fields = fields;
            this.fixHeadWidth(true);
            this.initScroller();
        },
        setItems: function setItems(items) {
            var _this2 = this;

            this.selected = [];
            this.summaryData = [];
            this.items = items;

            if (this.params.items) {
                this.params.items = items;
            }
            this.$nextTick(function () {
                _this2.fixHeadWidth();
                _this2.initScroller();
            });
        },
        getSelected: function getSelected() {
            return this.selected || [];
        },
        setSelected: function setSelected(value) {
            this.selected = value;
        },
        initScroller: function initScroller() {
            if (this.scrollX) {
                var box = this.find('.outer-box')[0];
                if (this.$refs.scrollBar) {
                    this.$refs.scrollBar.init(box);
                }
            }
        },
        cellFilter: function cellFilter(key, item) {
            var value = item[key];
            var cellTextMap = this.cellTextMap;
            if (cellTextMap && typeof cellTextMap[key] === 'function') {
                return item && cellTextMap[key].call(this, item[key], item, key);
            } else if (cellTextMap && cellTextMap.fieldFilter) {
                return item && cellTextMap.fieldFilter.call(this, item[key], item, key);
            } else {
                return value === null ? this.emptyText || '-' : item[key];
            }
        },
        trickCellPlugin: function trickCellPlugin(field, item) {
            if (this.cellPlugin && this.cellPlugin[field]) {
                return this.cellPlugin[field].call(this, field, item);
            }
            return '';
        }
    }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"smui-table simple-table"},[(_vm.showScrollBar)?_c('scroll-bar',{ref:"scrollBar"}):_vm._e(),_vm._v(" "),_c('div',{ref:"outerBox",staticClass:"outer-box",class:{'scroll-x': _vm.scrollX, focus: _vm.isFocus, empty: _vm.isEmpty && _vm.emptyTip},on:{"click":_vm.click,"scroll":_vm.scrollHorizon}},[_vm._t("plate"),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.scrollY || _vm.emptyTip),expression:"scrollY || emptyTip"}],staticClass:"affix-head",class:{'scroll-y': _vm.scrollY, scrolling: _vm.scrolling}},[_c('table',[_c('colgroup',[(_vm.selectable)?_c('col'):_vm._e(),_vm._v(" "),_vm._l((_vm.fields),function(field){return _c('col')})],2),_vm._v(" "),_c("table-head",{ref:"affix-head",tag:"thead",attrs:{"params":_vm.headParams},on:{"check-change":_vm.changeCheck}})])]),_vm._v(" "),_c('div',{staticClass:"table-body",class:{'scroll-y': _vm.scrollY, scrolling: _vm.scrolling},style:({width: _vm.scrollWidth + 'px'}),on:{"scroll":_vm.scrollVertical,"mouseleave":function($event){_vm.isFocus = false}}},[_c('table',{staticClass:"table-content"},[_c("table-head",{ref:"head",tag:"thead",class:{invis: _vm.scrollTop > 10},attrs:{"params":_vm.headParams},on:{"check-change":_vm.changeCheck}}),_vm._v(" "),_vm._l((_vm.items),function(item,row){return _c('tr',{staticClass:"table-row",class:{disabled: item.$disabled}},[(_vm.selectable)?_c('td',{attrs:{"data-col":"select","state":_vm.cellFilter('select', item)}},[_c('div',{staticClass:"pin-x"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.selected),expression:"selected"}],attrs:{"type":"checkbox","disabled":item.$disabled},domProps:{"value":row,"checked":Array.isArray(_vm.selected)?_vm._i(_vm.selected,row)>-1:(_vm.selected)},on:{"change":function($event){var $$a=_vm.selected,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=row,$$i=_vm._i($$a,$$v);if($$c){$$i<0&&(_vm.selected=$$a.concat($$v))}else{$$i>-1&&(_vm.selected=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.selected=$$c}}}})])]):_vm._e(),_vm._v(" "),_vm._l((_vm.fields),function(field){return _c('td',{attrs:{"data-col":field,"data-row":row}},[_c('div',{class:{'pin-x': _vm.pinCell && _vm.pinCell[field]}},[(_vm.cellComp[field])?_c(_vm.cellComp[field].tag,{key:item.$id || item.id || field + row,tag:"component",attrs:{"params":_vm.cellComp[field],"item":item,"model":item[field]},on:{"model-change":function (value) {item[field] = value}}}):_c('div',{domProps:{"innerHTML":_vm._s(_vm.cellFilter(field, item))}}),_vm._v(" "),_c('div',{staticClass:"plugin-items",domProps:{"innerHTML":_vm._s(_vm.trickCellPlugin(field, item))}})],1)])})],2)}),_vm._v(" "),_vm._l((_vm.padRows),function(row){return _c('tr',{staticClass:"pad-row"},[(_vm.selectable)?_c('td',{attrs:{"data-col":"select"}}):_vm._e(),_vm._v(" "),_vm._l((_vm.fields),function(field){return _c('td',{attrs:{"data-col":field,"data-row":row}})})],2)}),_vm._v(" "),(_vm.sumData.cnt && _vm.items.length)?_c('tr',{staticClass:"summary-row"},[(_vm.selectable)?_c('td',{attrs:{"data-col":"check"}}):_vm._e(),_vm._v(" "),(_vm.sumData.cnt)?_c('td',{staticClass:"title",attrs:{"colspan":_vm.sumData.cnt},domProps:{"innerHTML":_vm._s(_vm.summary.title)}}):_vm._e(),_vm._v(" "),_vm._l((_vm.sumData.data),function(value,field){return _c('td',{attrs:{"data-col":field}},[_c('div',{domProps:{"innerHTML":_vm._s(value)}})])})],2):_vm._e()],2),_vm._v(" "),(_vm.emptyTip && _vm.isEmpty)?_c('div',{staticClass:"empty-box"},[_c('div',{staticClass:"empty-text",domProps:{"innerHTML":_vm._s(_vm.emptyTip)}})]):_vm._e()])],2)],1)}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-1008abc6", __vue__options__)
  } else {
    hotAPI.reload("data-v-1008abc6", __vue__options__)
  }
})()}