'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = {
    mounted: function mounted() {
        this.$on('');
    },

    methods: {
        $broadcast: function $broadcast(type, data) {
            // 慎重使用广播，会遍历组件树
            var $p = this;
            $p.$emit(type, data);
            var events = $p.$options.events;
            if ((typeof events === 'undefined' ? 'undefined' : _typeof(events)) === 'object') {
                var rst = this.$hijack.call($p, type, data, events);
                // 如果返回false, 中断之
                if (rst === false) {
                    return;
                }
            }
            $p.$children.forEach(function (item) {
                $p.$broadcast.call(item, type, data);
            });
        },
        $dispatch: function $dispatch(type, data) {
            var $p = this;
            while ($p && $p.$emit) {
                $p.$emit(type, data);
                var events = $p.$options.events;
                if ((typeof events === 'undefined' ? 'undefined' : _typeof(events)) === 'object') {
                    var rst = this.$hijack.call($p, type, data, events);
                    // 如果返回false, 中断之
                    if (rst === false) {
                        break;
                    }
                }
                $p = $p.$parent;
            }
        },
        $hijack: function $hijack(type, data, events) {
            var _type$split = type.split(':'),
                _type$split2 = _slicedToArray(_type$split, 2),
                fun = _type$split2[0],
                modifer = _type$split2[1];

            if (events.hasOwnProperty(fun)) {
                if (modifer) {
                    return events[fun].call(this, modifer, data);
                }
                // 此处的this指向的是当前劫匪
                return events[fun].call(this, data);
            }
        },
        $update: function $update(data) {
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    this.$dispatch('update:' + key, data[key]);
                }
            }
        }
    },
    events: {
        update: function update(key, value) {
            if (this.$data.hasOwnProperty(key)) {
                this[key] = value;
            }
        }
    }
};