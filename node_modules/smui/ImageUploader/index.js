var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".image-uploader {\n  width: 500px;\n  height: 400px;\n}\n.image-uploader input[type=\"file\"] {\n  display: none;\n}\n.image-uploader canvas {\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n}\n.image-uploader canvas.source {\n  visibility: hidden;\n}\n.image-uploader .cropper {\n  max-height: 200px;\n  max-width: 100%;\n  overflow: scroll;\n}")
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _cropperjs = require('cropperjs');

var _cropperjs2 = _interopRequireDefault(_cropperjs);

var _Dialog = require('../Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

require('cropperjs/dist/cropper.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _window = window,
    Blob = _window.Blob,
    FileReader = _window.FileReader,
    FormData = _window.FormData;
exports.default = {
    props: ['params'],
    data: function data() {
        return (0, _assign2.default)({
            file: {},
            crop: {
                x: 0,
                y: 0,
                height: 0,
                width: 0,
                scaleX: 0,
                scaleY: 0
            },
            width: 80,
            height: 80,
            dataURL: '',
            sourceURL: ''
        }, this.params || {});
    },
    mounted: function mounted() {
        var _$refs = this.$refs,
            canvas = _$refs.canvas,
            preview = _$refs.preview;

        this.canvas = canvas;
        this.preview = preview;
    },

    methods: {
        pickFile: function pickFile() {
            this.$refs.file.click();
        },
        pickURL: function pickURL() {
            var _this = this;

            _Dialog2.default.prompt('请输入远程图片URL', function (value) {
                if (value) {
                    _this.drawToCanvas(value);
                }
            });
        },
        ensure: function ensure() {
            this.uploadImage();
        },
        readFile: function readFile() {
            var input = this.$refs.file;
            var file = input.files[0];
            if (!/image\/\w+/.test(file.type)) {
                _Dialog2.default.alert('请确保文件为图像类型');
                return false;
            }
            var reader = new FileReader();
            var vm = this;
            reader.readAsDataURL(file);
            reader.onload = function (e) {
                vm.drawToCanvas(this.result);
            };
        },
        drawToCanvas: function drawToCanvas(url) {
            var image = document.createElement('IMG');
            var editor = this.$refs.editor;
            editor.innerHTML = '';
            editor.appendChild(image);
            var canvas = this.canvas;
            var ctx = canvas.getContext('2d');
            image.crossOrigin = 'anonymous';
            image.src = url;
            var vm = this;

            image.onload = function () {
                var width = image.width,
                    height = image.height;

                canvas.width = width;
                canvas.height = height;
                ctx.clearRect(0, 0, width, height);
                ctx.globalCompositeOperation = 'destination-over';
                ctx.drawImage(image, 0, 0, width, height);
                var restrict = {
                    x: 0,
                    y: 0,
                    width: vm.width,
                    height: vm.height
                };
                new _cropperjs2.default(image, {
                    aspectRatio: 1,
                    rotatable: false,
                    scalable: false,
                    viewMode: 1,
                    cropBoxResizable: false,
                    background: true,
                    ready: function ready(e) {
                        this.cropper.setData(restrict);
                    },
                    crop: function crop(e) {
                        (0, _assign2.default)(vm.crop, e.detail);
                        vm.cutImage(e.detail);
                    }
                });
            };
            image.onerror = function (e) {
                alert('\u4E0D\u80FD\u6B63\u5E38\u83B7\u53D6\uFF1A' + e.target.src);
            };
        },
        cutImage: function cutImage(box) {
            var pv = this.preview;
            var ctx2 = pv.getContext('2d');
            var ctx = this.canvas.getContext('2d');
            var x = box.x,
                y = box.y,
                width = box.width,
                height = box.height;

            ctx2.clearRect(0, 0, pv.width, pv.height);

            var imgData = ctx.getImageData(x, y, width, height);
            ctx2.putImageData(imgData, 0, 0);
        },
        getForm: function getForm() {
            var dataURL = this.preview.toDataURL('image/png', 1.0);

            this.dataURL = dataURL;
            var tfile = this.convertBase64UrlToBlob(dataURL, 'png');
            tfile.name = 'newFile';
            var formData = new FormData();
            formData.set('file', tfile, tfile.name);
            return formData;
        },
        uploadImage: function uploadImage() {},
        convertBase64UrlToBlob: function convertBase64UrlToBlob(urlData, type) {
            var bytes = window.atob(urlData.split(',')[1]);
            var ab = new ArrayBuffer(bytes.length);
            var ia = new Uint8Array(ab);
            for (var i = 0; i < bytes.length; i++) {
                ia[i] = bytes.charCodeAt(i);
            }
            return new Blob([ab], { type: 'image/' + type });
        }
    }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"image-uploader"},[_c('div',[_c('input',{ref:"file",attrs:{"type":"file"},on:{"change":_vm.readFile}}),_vm._v(" "),_c('button',{on:{"click":_vm.pickFile}},[_vm._v("选择本地文件")]),_vm._v(" "),_c('button',{on:{"click":_vm.pickURL}},[_vm._v("选择远程文件")])]),_vm._v(" "),_c('div',[_c('canvas',{ref:"canvas",staticClass:"canvas source"}),_vm._v(" "),_c('canvas',{ref:"preview",staticClass:"canvas",attrs:{"width":_vm.width,"height":_vm.height}})]),_vm._v(" "),_c('div',{ref:"editor",staticClass:"cropper"})])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-8ad257d8", __vue__options__)
  } else {
    hotAPI.reload("data-v-8ad257d8", __vue__options__)
  }
})()}